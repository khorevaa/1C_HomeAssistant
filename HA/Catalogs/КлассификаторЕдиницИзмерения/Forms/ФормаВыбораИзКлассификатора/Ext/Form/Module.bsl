
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Параметры.Свойство("СтрокаПоиска") Тогда
		СтрокаПоиска = СокрЛП(ЭтаФорма.Параметры.СтрокаПоиска);
	КонецЕсли;
	
	Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	Классификатор.Вывести(Макет);
	Классификатор.ФиксацияСверху = 1;
	
	ОбластьКодЧисловойЛево          = Макет.Области.КодЧисловой.Лево;
	ОбластьКодЧисловойПраво         = Макет.Области.КодЧисловой.Право;
	ОбластьНаименованиеКраткоеЛево  = Макет.Области.НаименованиеКраткое.Лево;
	ОбластьНаименованиеКраткоеПраво = Макет.Области.НаименованиеКраткое.Право;
	ОбластьНаименованиеПолноеЛево   = Макет.Области.НаименованиеПолное.Лево;
	ОбластьНаименованиеПолноеПраво  = Макет.Области.НаименованиеПолное.Право;
	
	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		НайденнаяОбласть = Классификатор.НайтиТекст(СтрокаПоиска,, Классификатор.Области.КодЧисловой,,,, Истина);
		Элементы.Классификатор.ТекущаяОбласть = НайденнаяОбласть;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		СтрокаПоиска = СокрЛП(СтрокаПоиска);
		ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Область = Элементы.Классификатор.ТекущаяОбласть;
	ВыполнитьВыбор(Область);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выбрать(Команда)
	
	Область = Элементы.Классификатор.ТекущаяОбласть;
	ВыполнитьВыбор(Область);
	
КонецПроцедуры


&НаКлиенте
Процедура НайтиСтроку(Команда)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	НичегоНеНашли = Ложь;
	ИскатьСтрокуНаСервере(НичегоНеНашли);
	
	Если НичегоНеНашли Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Строка не найдена'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИскатьСтрокуНаСервере(НичегоНеНашли)
	
	ТекущаяОбласть = Элементы.Классификатор.ТекущаяОбласть;
	
	НайденнаяОбласть = Классификатор.НайтиТекст(СтрокаПоиска, ТекущаяОбласть, , , , , Истина);
	Если НайденнаяОбласть = Неопределено Тогда
		НайденнаяОбласть = Классификатор.НайтиТекст(СтрокаПоиска, , , , , , Истина);
		Если НайденнаяОбласть = Неопределено Тогда
			НичегоНеНашли = Истина;
			ТекущийЭлемент = Элементы.СтрокаПоиска;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Переведем фокус с кнопки поиска (или строки поиска) на найденное значение макета
	ТекущийЭлемент = Элементы.Классификатор;
	Классификатор.ПоказатьУровеньГруппировокСтрок(2);
	ТекущийЭлемент.ТекущаяОбласть = НайденнаяОбласть;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоискСуществующейЕдиницы(Знач ПараметрыФормы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторЕдиницИзмерения.Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ПараметрыФормы.ЗначенияЗаполнения.Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВыбор(ТекущаяОбласть)
	
	ОбластьКодЧисловой         = Классификатор.Область(ТекущаяОбласть.Верх, ОбластьКодЧисловойЛево,
		ТекущаяОбласть.Низ, ОбластьКодЧисловойПраво);
	КодЧисловой = ОбластьКодЧисловой.Текст;
	
	НаименованиеКраткое = Классификатор.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеКраткоеЛево,
		ТекущаяОбласть.Низ, ОбластьНаименованиеКраткоеПраво).Текст;
	НаименованиеПолное  = Классификатор.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеПолноеЛево,
		ТекущаяОбласть.Низ, ОбластьНаименованиеПолноеПраво).Текст;
	
	ЗначенияЗаполнения = Новый Структура("Код, Наименование, НаименованиеПолное",
		КодЧисловой, СтрПолучитьСтроку(НаименованиеКраткое, 1), СтрПолучитьСтроку(НаименованиеПолное, 1));
		
	ПравилоПересчета = КоэфПересчетаЕдИзм(КодЧисловой);
	ЗначенияЗаполнения.Вставить("Коэффициент", ПравилоПересчета.Коэффициент);
	ЗначенияЗаполнения.Вставить("БазоваяЕдиница", ПравилоПересчета.БазоваяЕдиница);
	ЗначенияЗаполнения.Вставить("Родитель", РодительОбласти(Классификатор, ОбластьКодЧисловой));
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ЕдИзм = ПоискСуществующейЕдиницы(ПараметрыФормы);
	
	Если ЕдИзм <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", ЕдИзм);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КлассификаторЕдиницИзмерения.Форма.ФормаЭлемента",
			ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоэфПересчетаЕдИзм(КодЧисловой)
	Возврат Справочники.КлассификаторЕдиницИзмерения.КоэфПересчетаЕдИзм(КодЧисловой);
КонецФункции

&НаКлиенте
Функция РодительОбласти(ТабДокумент, НайденнаяОбласть)
	
	ОбластьГруппы = ТабДокумент.НайтиТекст("А",
		НайденнаяОбласть, 
		ТабДокумент.Области.КодЧисловой, 
		Ложь,,
		Ложь,
		Ложь
	);
	НаименованиеПолное = Классификатор.Область(ОбластьГруппы.Верх, ОбластьНаименованиеПолноеЛево,
		ОбластьГруппы.Низ, ОбластьНаименованиеПолноеПраво).Текст;
	
	ИмяРодителя = СтрПолучитьСтроку(НаименованиеПолное, 1);
	
	Возврат СсылкаРодителяЕдИзм(ИмяРодителя);
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаРодителяЕдИзм(ИмяРодителя)
	
	Возврат Справочники.КлассификаторЕдиницИзмерения.СсылкаРодителяЕдИзм(ИмяРодителя);
	
КонецФункции


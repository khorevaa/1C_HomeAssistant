#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет поиск единицы измерения в справочнике "КлассификаторЕдиницИзмерения"
// если элемент в справочнике не найден, осуществляется попыка добавления элемента из ОКЕИ,
// если в ОКЕИ элемент не найден, то он создается с переданным кодом и наименованием
// Если Наиенование не задано то добавление элемента в справочник произведено не будет!
//
// Параметры:
// - КодПоОКЕИ - Строка(3), код единицы измерения по ОКЕИ (Обязательный)
// - Наименование - Строка, Наименование единицы измерения (Необязательный)
// - НаименованиеПолное - Строка, Полное наименование единицы измерения (Необязательный)
//
// Возвращаемое значение:
// Неопределено - если поиск и попытка добавления элемента не дали результатов
// СправочникСсылка.КлассификаторЕдиницИзмерения - если поиск или добавление успешны
// 
Функция ЕдиницаИзмеренияПоКоду(КодПоОКЕИ, Наименование = "", НаименованиеПолное = "", ОбновитьВсе = Ложь) Экспорт

	// Если кодПоОКЕИ не заполнен то воврат
	Если НЕ ЗначениеЗаполнено(КодПоОКЕИ) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		// Сначала попытаемся найти единицу среди уже существующих в справочнике
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодПоОКЕИ);
		
		Если ЕдиницаИзмерения <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда 
			
			// Если нашли возвращаем ссылку
			Если ОбновитьВсе Тогда
				ЗначенияДляЗаполнения = КоэфПересчетаЕдИзм(КодПоОКЕИ);
				ЕдиницаИзмеренияОб = ЕдиницаИзмерения.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ЕдиницаИзмеренияОб, ЗначенияДляЗаполнения);
				ЕдиницаИзмеренияОб.Записать();
			КонецЕсли;
				
			Возврат ЕдиницаИзмерения;
			
		Иначе	
			
			// Если единицы нет в справочнике, поищем ее в классификаторе
			// Классификатор хранится в макете "КлассификаторЕдиницИзмерения"
			// Загружаем макет
			Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
			
			// Запомним параметры макета которые будем использовать дальше
			ОбластьКодЧисловойЛево          = Макет.Области.КодЧисловой.Лево;
			ОбластьКодЧисловойПраво         = Макет.Области.КодЧисловой.Право;
			ОбластьНаименованиеКраткоеЛево  = Макет.Области.НаименованиеКраткое.Лево;
			ОбластьНаименованиеКраткоеПраво = Макет.Области.НаименованиеКраткое.Право;
			ОбластьНаименованиеПолноеЛево   = Макет.Области.НаименованиеПолное.Лево;
			ОбластьНаименованиеПолноеПраво  = Макет.Области.НаименованиеПолное.Право;
			
			// Загружаем табличный документ
			ТабДокумент = Новый ТабличныйДокумент;
			ТабДокумент.Вывести(Макет);
			
			// Поищем КодПоОКЕИ в таблице классификатора
			НайденнаяОбласть = ТабДокумент.НайтиТекст(КодПоОКЕИ,, ТабДокумент.Области.КодЧисловой,,,, Истина);
			
			// Инициализируем временную структуру для реквизитов единицы измерения
			ЗначенияЗаполнения = Новый Структура("Код, Наименование, НаименованиеПолное");
			
			// Если единица найдена, заполняем нашу структуру из классификатора
			Если НайденнаяОбласть <> Неопределено Тогда
				
				ЗначенияЗаполнения.Вставить("Код", ТабДокумент.Область(НайденнаяОбласть.Верх, ОбластьКодЧисловойЛево,
				НайденнаяОбласть.Низ, ОбластьКодЧисловойПраво).Текст);
				
				НаименованиеДляЗаполнения = ТабДокумент.Область(НайденнаяОбласть.Верх, ОбластьНаименованиеКраткоеЛево,
				НайденнаяОбласть.Низ, ОбластьНаименованиеКраткоеПраво).Текст;
				
				ЗначенияЗаполнения.Вставить("Наименование", СтрПолучитьСтроку(НаименованиеДляЗаполнения, 1));
				
				НаименованиеПолное = ТабДокумент.Область(НайденнаяОбласть.Верх, ОбластьНаименованиеПолноеЛево,
				НайденнаяОбласть.Низ, ОбластьНаименованиеПолноеПраво).Текст;
				
				ЗначенияЗаполнения.Вставить("НаименованиеПолное", СтрПолучитьСтроку(НаименованиеПолное, 1));
				
				ПравилоПересчета = КоэфПересчетаЕдИзм(КодПоОКЕИ);
				ЗначенияЗаполнения.Вставить("Коэффциент", ПравилоПересчета.Коэффициент);
				ЗначенияЗаполнения.Вставить("БазоваяЕдиница", ПравилоПересчета.БазоваяЕдиница);
				ЗначенияЗаполнения.Вставить("Родитель", РодительОбласти(ТабДокумент, НайденнаяОбласть, ОбластьНаименованиеПолноеЛево, ОбластьНаименованиеПолноеПраво));
				
				// Если в классификаторе нет подходящей единицы, но у нас есть данные для заполнения справочника
				// то добавляем новую единицу по этим данным
			ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
				
				ЗначенияЗаполнения.Вставить("Код", КодПоОКЕИ);
				
				ЗначенияЗаполнения.Вставить("Наименование", Наименование);
				
				ЗначенияЗаполнения.Вставить("НаименованиеПолное", ?(ЗначениеЗаполнено(НаименованиеПолное), НаименованиеПолное, Наименование));
				
			// Если единицы нет в классификаторе и ничего кроме кода о ней не известно
			// возвращаем неопределено
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			// Создаем единицу измерения в справочнике
			НоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(НоваяЕдиницаИзмерения, ЗначенияЗаполнения);
			
			НоваяЕдиницаИзмерения.Записать();
			
			ЕдиницаИзмерения = НоваяЕдиницаИзмерения.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции	

Функция ПравилаПересчетаЕдиницИзмерения(ТолькоИспользуемыеЕдиницы = Ложь) Экспорт

	ТипКодаЕдиницыИзмерения = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3, ДопустимаяДлина.Фиксированная));
	
	ПравилаПересчета = Новый ТаблицаЗначений;
	ПравилаПересчета.Колонки.Добавить("ЕдиницаИзмерения",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения")); // Может быть не заполнена, если единицы нет в справочнике
	ПравилаПересчета.Колонки.Добавить("КодЕдиницыИзмерения", ТипКодаЕдиницыИзмерения);
	ПравилаПересчета.Колонки.Добавить("БазоваяЕдиница",      Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения")); // Может быть не заполнена, если единицы нет в справочнике
	ПравилаПересчета.Колонки.Добавить("КодБазовойЕдиницы",   ТипКодаЕдиницыИзмерения);
	ПравилаПересчета.Колонки.Добавить("Коэффициент",         Новый ОписаниеТипов("Число"));
	
	ЗагруженныйКлассификатор = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Классификатор.Код КАК Код,
	|	Классификатор.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК Классификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагруженныйКлассификатор.Вставить(Выборка.Код, Выборка.Ссылка);
	КонецЦикла;
	
	МакетПравил = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("ПравилаПересчета");
	ТекстМакета = СокрЛП(МакетПравил.ПолучитьОбласть("R1C1").ТекущаяОбласть.Текст);
	ПоставляемыеПравилаПересчета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстМакета);
	Для Каждого ПоставляемоеПравило Из ПоставляемыеПравилаПересчета.Данные Цикл
		
		ЕдиницаИзмерения = ЗагруженныйКлассификатор[ПоставляемоеПравило.КодЕдиницыИзмерения];
		
		Если ТолькоИспользуемыеЕдиницы И ЕдиницаИзмерения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПравилаПересчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоставляемоеПравило);// В поле Коэффициент - неявное преобразование строки к числу
		НоваяСтрока.Коэффициент = КонвертироватьТипЧисло(ПоставляемоеПравило.Коэффициент); // В мобильном приложении неправильно конвертируется коэффициент
		
		НоваяСтрока.ЕдиницаИзмерения = ЗагруженныйКлассификатор[НоваяСтрока.КодЕдиницыИзмерения];
		НоваяСтрока.БазоваяЕдиница   = ЗагруженныйКлассификатор[НоваяСтрока.КодБазовойЕдиницы];
		
	КонецЦикла;
	
	Возврат ПравилаПересчета;
	
КонецФункции

Функция КоэфПересчетаЕдИзм(КодПоОКЕИ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Коэффициент");
	Результат.Вставить("БазоваяЕдиница");
	
	ПравилаПересчета = Справочники.КлассификаторЕдиницИзмерения.ПравилаПересчетаЕдиницИзмерения();
	СтрокиПересчета = ПравилаПересчета.НайтиСтроки(
		Новый Структура("КодЕдиницыИзмерения", КодПоОКЕИ)); 
		
	Если СтрокиПересчета.Количество() > 0 Тогда
		Пересчет = СтрокиПересчета[0];
		
		Если Не ЗначениеЗаполнено(Пересчет.КодБазовойЕдиницы) 
			Или Пересчет.КодЕдиницыИзмерения = Пересчет.КодБазовойЕдиницы Тогда
			Результат.БазоваяЕдиница = Неопределено;
			Результат.Коэффициент = 1;
		Иначе
			Результат.БазоваяЕдиница = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(Пересчет.КодБазовойЕдиницы);
			Результат.Коэффициент = Пересчет.Коэффициент;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сonvert a source unit quantity into the destination unit quanity using multipliers of  the units
//
// Параметры:
//  ИсходнаяЕдиница - Справочник.КлассификаторЕдиницИзмерения - unit you want to convert
//  КонечнаяЕдиница - Справочник.КлассификаторЕдиницИзмерения - unit you want to convert into
//  Количество      - Число - a quantity in the source unit
// 
// Возвращаемое значение:
//  число - a quantity in the final unit
//
Функция ПересчитатьЕдиницуИзмерения(ИсходнаяЕдиница, КонечнаяЕдиница, Количество) Экспорт
	
	Если ИсходнаяЕдиница = КонечнаяЕдиница
		Или Не ЗначениеЗаполнено(ИсходнаяЕдиница)
		Или Не ЗначениеЗаполнено(КонечнаяЕдиница) Тогда
		
		Возврат Количество;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Коэффициент КАК Коэффициент,
	|	КлассификаторЕдиницИзмерения.БазоваяЕдиница КАК БазоваяЕдиница
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Ссылка = &ИсходнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Коэффициент КАК Коэффициент,
	|	КлассификаторЕдиницИзмерения.БазоваяЕдиница КАК БазоваяЕдиница
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Ссылка = &КонечнаяЕдиница");
	Запрос.УстановитьПараметр("ИсходнаяЕдиница", ИсходнаяЕдиница);
	Запрос.УстановитьПараметр("КонечнаяЕдиница", КонечнаяЕдиница);
	
	Пакет = Запрос.ВыполнитьПакет();
	ВыборкаИсходнойЕд = Пакет[0].Выбрать();
	ВыборкаИсходнойЕд.Следующий();
	ВыборкаКонечнойЕд = Пакет[1].Выбрать();
	ВыборкаКонечнойЕд.Следующий();
	
	Если (Не ЗначениеЗаполнено(ВыборкаИсходнойЕд.БазоваяЕдиница) И ВыборкаИсходнойЕд.Коэффициент = 0)
		Или (Не ЗначениеЗаполнено(ВыборкаКонечнойЕд.БазоваяЕдиница)И ВыборкаКонечнойЕд.Коэффициент = 0) Тогда
		
		//ВызватьИсключение НСтр("ru = 'Конвертация единиц с разными базовыми единицами измерения не поддерживается'; en = 'Units conversion with different parent units has not been supported yet'");
		Возврат Количество;
	КонецЕсли;
	
	//1 baseSOurce =  Convert to base source
	//2 multiply to dest unit
	
	КолВоИсхБазовая = ВыборкаИсходнойЕд.Коэффициент * Количество;
	КолВоКонечное = ?(ВыборкаКонечнойЕд.БазоваяЕдиница = КонечнаяЕдиница,
		КолВоИсхБазовая * ВыборкаКонечнойЕд.Коэффициент,
		КолВоИсхБазовая / ВыборкаКонечнойЕд.Коэффициент);
	
	Возврат КолВоКонечное;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьЕдиницуИзмеренияПоУмолчанию() Экспорт
	
	ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");	
	Если ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
	КонецЕсли;
	
	Возврат ЕдиницаПоУмолчанию;
	
КонецФункции

Функция КонвертироватьТипЧисло(ЧислоХМЛ) Экспорт
	
	ДлинаХМЛ = СтрДлина(ЧислоХМЛ);
	МножительВыбран = Ложь;
	МножительХМЛ = "";
	
	МножителиЧисла = Новый Массив();
	МножительЧисло = 1;
	ЭлементыЧисла = Новый Массив();
	Пока ДлинаХМЛ > 0 Цикл
		
		Символ = Сред(ЧислоХМЛ, ДлинаХМЛ, 1);
		
		Если Символ = "+" Или Символ = "-" Тогда
			ЧисловойМножитель = Число(СтрСоединить(МножителиЧисла));
			Для Сч = 1 По ЧисловойМножитель Цикл
				МножительЧисло = ?(Символ = "+", МножительЧисло * 10, МножительЧисло / 10);
			КонецЦикла;
			МножительВыбран = Истина;
		ИначеЕсли Не МножительВыбран Тогда
			МножителиЧисла.Вставить(0, Символ);
		ИначеЕсли Символ = "E" Тогда
			ДлинаХМЛ = ДлинаХМЛ - 1;
			Пока ДлинаХМЛ > 0 Цикл
				Символ = ЭкранироватьСимвол(Сред(ЧислоХМЛ, ДлинаХМЛ, 1));
				ЭлементыЧисла.Вставить(0, Символ);
				ДлинаХМЛ = ДлинаХМЛ - 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ДлинаХМЛ = ДлинаХМЛ - 1;
		
	КонецЦикла;
	
	ЧислоЦифрами = Число(СтрСоединить(ЭлементыЧисла));
	
	Возврат ЧислоЦифрами * МножительЧисло;
	
КонецФункции

Функция ЭкранироватьСимвол(ИсхСимвол)
	
	Символ = СтрЗаменить(ИсхСимвол, ",", ".");
	
	Возврат Символ;
	
КонецФункции

Функция РодительОбласти(ТабДокумент, НайденнаяОбласть, ОбластьНаименованиеПолноеЛево, ОбластьНаименованиеПолноеПраво)
	
	ОбластьГруппы = ТабДокумент.НайтиТекст("А",
		НайденнаяОбласть, 
		ТабДокумент.Области.КодЧисловой, 
		Ложь,,
		Ложь,
		Ложь
	);
	НаименованиеПолное = ТабДокумент.Область(ОбластьГруппы.Верх, ОбластьНаименованиеПолноеЛево,
		ОбластьГруппы.Низ, ОбластьНаименованиеПолноеПраво).Текст;
	
	ИмяРодителя = СтрПолучитьСтроку(НаименованиеПолное, 1);
	
	Возврат СсылкаРодителяЕдИзм(ИмяРодителя);
	
КонецФункции

Функция СсылкаРодителяЕдИзм(ИмяРодителя) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.ЭтоГруппа = Истина
	|	И КлассификаторЕдиницИзмерения.Наименование = ПОДСТРОКА(&Наименование, 1, 25)");
	Запрос.УстановитьПараметр("Наименование", СокрЛП(ИмяРодителя));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли